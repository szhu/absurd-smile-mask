let inputC = document.querySelector("#input-c");
let inputCCopy = document.querySelector("#input-c-copy");
let inputAscii = document.querySelector("#input-ascii");
let inputCanvas = document.querySelector("#input-canvas");
let ctx = inputCanvas.getContext("2d");
let inputCanvasColor = document.querySelector("#input-canvas-color").elements[
  "color"
];
let inputCanvasSize =
  document.querySelector("#input-canvas-size").elements["size"];

let inputDimensionsW = document.querySelector("#input-dimensions-w");
let inputDimensionsH = document.querySelector("#input-dimensions-h");
let inputDimensions = {
  get w() {
    return +inputDimensionsW.value;
  },
  get h() {
    return +inputDimensionsH.value;
  },
};

function updateSize() {
  inputCanvas.width = inputDimensions.w;
  inputCanvas.height = inputDimensions.h;
}

inputDimensionsW.addEventListener("change", updateSize);
inputDimensionsH.addEventListener("change", updateSize);

inputCCopy.addEventListener("click", () => {
  inputC.select();
  document.execCommand("copy");
});

inputC.addEventListener("input", () => {
  fromC();
  toAscii();
  toCanvas();
});

inputAscii.addEventListener("input", (e) => {
  console.log(e.target.value);
});

function getCanvasPosition(e) {
  let inputCanvasRect = inputCanvas.getBoundingClientRect();
  let x = Math.round((e.clientX - inputCanvasRect.left * 5) / 5);
  let y = Math.round((e.clientY - inputCanvasRect.top * 5) / 5);
  return { x, y };
}

function drawAt({ e, x, y }) {
  let size = +inputCanvasSize.value;
  let circle = new Path2D();
  let radius = e.shiftKey ? 10 : size;
  circle.arc(x, y, radius, 0, 2 * Math.PI);
  ctx.fill(circle);
}

inputCanvas.addEventListener("pointerdown", (e) => {
  let { x, y } = getCanvasPosition(e);
  let colorOption = inputCanvasColor.value;
  let color = colorOption;
  if (colorOption === "toggle") {
    color = ctx.getImageData(x, y, 1, 1).data[0] > 128 ? "black" : "white";
  }
  ctx.fillStyle = color;
  drawAt({ e, x, y });
});

inputCanvas.addEventListener("pointermove", (e) => {
  if (e.buttons) {
    let { x, y } = getCanvasPosition(e);
    drawAt({ e, x, y });
  }
});
inputCanvas.addEventListener("touchmove", (e) => {
  e.preventDefault();
});

inputCanvas.addEventListener("pointerleave", (e) => {
  fromCanvas();
  toAscii();
  toC();
});
inputCanvas.addEventListener("pointerup", (e) => {
  fromCanvas();
  toAscii();
  toC();
});

// https://stackoverflow.com/a/62224531/782045
const toBinString = (bytes) =>
  bytes.reduce((str, byte) => str + byte.toString(2).padStart(8, "0"), "");

const toBytes = (binString) =>
  Uint8Array.from(
    binString
      .split(/(.{8})/)
      .filter(Boolean)
      .map((x) => parseInt(x, 2))
  );

let bytes;
let binString;

function toC() {
  let rows = [];
  for (let i = 0; i < bytes.length; i += 12) {
    rows.push(Array.from(bytes.slice(i, i + 12)));
  }

  inputC.value = [
    "{",
    rows
      .map(
        (row) =>
          "    " +
          row
            .map(
              //
              (x) => `0x${x.toString(16).padStart(2, 0)},`
            )
            .join(" ")
      )
      .join("\n"),

    "}",
  ].join("\n");
}

function fromC() {
  let array = eval(inputC.value.replace(/{/, "[").replace(/}/, "]"));
  bytes = Uint8Array.from(array);
  binString = toBinString(bytes);
}

function toAscii() {
  let ascii = binString
    .split(new RegExp(`(.{${inputDimensions.w}})`))
    .filter(Boolean)
    .join("\n");
  inputAscii.value = ascii;
}

function toCanvas() {
  let imageArray = Array.from(binString)
    .map(Number)
    .flatMap((value) => [value * 255, value * 255, value * 255, 255]);

  let imageData = ctx.createImageData(inputDimensions.w, inputDimensions.h);
  imageData.data.set(imageArray);
  ctx.putImageData(imageData, 0, 0);
}

function fromCanvas() {
  let imageData = ctx.getImageData(0, 0, inputDimensions.w, inputDimensions.h);
  binString = "";
  for (let i = 0; i < imageData.data.length; i += 4) {
    binString += imageData.data[i] > 128 ? "1" : "0";
  }
  bytes = toBytes(binString);
}

inputC.value = `{
    0x00, 0x00, 0x03, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xFC, 0x00, 0x00,
    0x00, 0x00, 0x0C, 0x46, 0x00, 0x00, 0x00, 0x00, 0xFC, 0x47, 0xC0, 0x00,
    0x00, 0x01, 0xCE, 0x4C, 0x60, 0x00, 0x00, 0x03, 0x02, 0x58, 0x30, 0x00,
    0x00, 0x03, 0x02, 0x58, 0x10, 0x00, 0x00, 0x02, 0x02, 0x58, 0x18, 0x00,
    0x00, 0x03, 0x06, 0x4C, 0x18, 0x00, 0x00, 0x07, 0x04, 0x44, 0x18, 0x00,
    0x00, 0x0D, 0x80, 0x40, 0x3C, 0x00, 0x00, 0x09, 0xC0, 0x40, 0xE6, 0x00,
    0x00, 0x18, 0x78, 0x47, 0xC2, 0x00, 0x00, 0x18, 0x0C, 0x4E, 0x02, 0x00,
    0x00, 0x1F, 0x86, 0x4C, 0x7E, 0x00, 0x00, 0x0E, 0xC6, 0xE8, 0xEE, 0x00,
    0x00, 0x18, 0x43, 0xF8, 0x82, 0x00, 0x00, 0x10, 0x06, 0x4C, 0x03, 0x00,
    0x00, 0x30, 0x0C, 0x46, 0x01, 0x00, 0x00, 0x30, 0x18, 0x46, 0x01, 0x00,
    0x00, 0x10, 0x18, 0x43, 0x03, 0x00, 0x00, 0x18, 0x10, 0x43, 0x03, 0x00,
    0x00, 0x1C, 0x70, 0x41, 0x86, 0x00, 0x00, 0x0F, 0xE0, 0x40, 0xFE, 0x00,
    0x00, 0x09, 0x1E, 0x4F, 0x06, 0x00, 0x00, 0x08, 0x30, 0x43, 0x86, 0x00,
    0x00, 0x0C, 0x20, 0x41, 0x86, 0x00, 0x00, 0x06, 0x60, 0x40, 0x8C, 0x00,
    0x00, 0x07, 0x60, 0x40, 0xB8, 0x00, 0x00, 0x01, 0xE0, 0x41, 0xF0, 0x00,
    0x00, 0x00, 0x38, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x0F, 0xBE, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0xCF, 0x82, 0x0C, 0x86, 0x46,
    0x1F, 0xEF, 0xC3, 0x0C, 0xC6, 0xEE, 0x1C, 0xEC, 0xC7, 0x0C, 0xE6, 0x7C,
    0x1C, 0xED, 0x8D, 0x8C, 0xFE, 0x38, 0x1C, 0xED, 0x8D, 0xCC, 0xDE, 0x38,
    0x1D, 0xCD, 0xDF, 0xCC, 0xCE, 0x38, 0x1F, 0x8C, 0xF8, 0xEC, 0xC6, 0x38,
    0x1F, 0xEC, 0x08, 0x0C, 0xC2, 0x18, 0x1C, 0xEC, 0x00, 0xC0, 0x00, 0x00,
    0x1C, 0xFD, 0xFB, 0xC0, 0x00, 0x00, 0x1C, 0xFC, 0x63, 0x00, 0x00, 0x00,
    0x1C, 0xEC, 0x63, 0xC0, 0x00, 0x00, 0x1F, 0xEC, 0x60, 0xC0, 0x00, 0x00,
    0x1F, 0xCC, 0x63, 0xC0, 0x00, 0x00, 0x1F, 0x0C, 0x63, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x28, 0x2B, 0x4F, 0x67, 0x42, 0x38, 0x7B, 0xEA, 0x86, 0xB2, 0x28, 0xC7,

}
`;

window.addEventListener("DOMContentLoaded", () => {
  fromC();
  toAscii();
  toCanvas();
});
